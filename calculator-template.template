---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  AWS CloudFormation for a simple webapp calculator
  AWS Lambda function and static website hosted on
  Amazon S3.

Parameters:
  HtmlFileUrl:
    Type: String
    Default: https://raw.githubusercontent.com/hasherwi/calculator/main/calculator-page.html  # yamllint disable-line rule:line-length
    Description: URL of the HTML file to be uploaded to the S3 bucket.

Resources:
  CalculatorLambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      InvokeMode: RESPONSE_STREAM
      TargetFunctionArn: !GetAtt CalculatorLambdaFunction.Arn
      Cors:
        AllowCredentials: false
        # AllowHeaders:
        #   - *
        AllowMethods:
          - 'GET'
        AllowOrigins:
          - '*'
        # ExposeHeaders:
        #   - *
        # MaxAge: Integer

  CalculatorLambdaFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt CalculatorLambdaFunction.Arn
      FunctionUrlAuthType: 'NONE'
      Principal: '*'

  CalculatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CalculatorLambdaFunctionExecutionRole.Arn
      Runtime: python3.10
      #ReservedConcurrentExecutions: 0
        # Lowest value that still restricts is '1', but ...
        # In a new account, this reserves all capacity, resulting in an error.
        # Either set a value of 0, or increase the quota on your account.
        # A value of '0', blocks all usage.
      TracingConfig:
        Mode: Active
      Code:
        # yamllint disable rule:line-length
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("Event: ", json.dumps(event))
              print("Context: ", context)
              query_params = event.get('queryStringParameters', {})
              operation = query_params.get('operation', 'add')
              number1 = float(query_params.get('number1', 0))
              number2 = float(query_params.get('number2', 0))
              if operation == 'add':
                  result = number1 + number2
              elif operation == 'subtract':
                  result = number1 - number2
              elif operation == 'multiply':
                  result = number1 * number2
              elif operation == 'divide':
                  result = number1 / number2 if number2 != 0 else 'undefined'
              else:
                  return {'statusCode': 400, 'body': json.dumps('Invalid operation')}
              return {'statusCode': 200, 'body': json.dumps({'result': result})}
        # yamllint enable rule:line-length

  CalculatorLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
      WebsiteConfiguration:
        IndexDocument: calculator-page.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${WebsiteBucket}/calculator-page.html"  # yamllint disable-line rule:line-length
              # ${WebsiteBucket} returns just the bucket name.

  HtmlUploaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt HtmlUploaderLambdaExecutionRole.Arn
      Runtime: python3.10
      Code:
        # yamllint disable rule:line-length
        ZipFile: |
          import json
          import urllib.request
          import boto3
          def send_response(event, context, response_status, response_data):
            response_body = json.dumps({
              "Status": response_status,
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event['StackId'],
              "RequestId": event['RequestId'],
              "LogicalResourceId": event['LogicalResourceId'],
              "Data": response_data
            })
            headers = {
              'content-type': '',
              'content-length': str(len(response_body))
            }
            response_request = urllib.request.Request(event['ResponseURL'], method='PUT', data=response_body.encode('utf-8'), headers=headers)
            with urllib.request.urlopen(response_request) as response:
              print("Status code:", response.getcode())
              print("Status message:", response.msg)
          def lambda_handler(event, context):
            try:
              print("Event: ", json.dumps(event))
              print("Context: ", context)
              s3 = boto3.client('s3')
              bucket_name = event['ResourceProperties']['BucketName']
              url = event['ResourceProperties']['HtmlFileUrl']
              with urllib.request.urlopen(url) as response:
                data = response.read()
              s3.put_object(
                Bucket=bucket_name,
                Key='calculator-page.html',
                Body=data,
                ContentType='text/html'
              )
              send_response(event, context, "SUCCESS", {"Message": "Resource creation successful"})
            except Exception as e:
              print("Failed to process:", e)
              send_response(event, context, "FAILED", {"Message": str(e)})
        # yamllint enable rule:line-length

  HtmlUploaderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${WebsiteBucket}/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${WebsiteBucket}'

  HtmlUploadCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt HtmlUploaderLambda.Arn
      HtmlFileUrl: !Ref HtmlFileUrl  # A Parameter.
      BucketName: !Ref WebsiteBucket  # Returns just the bucket's name.

Outputs:
  LambdaFunctionUrl:
    Description: The URL of the Lambda function
    Value: !GetAtt CalculatorLambdaFunctionUrl.FunctionUrl
  WebsiteURL:
    Description: URL of the S3 website
    Value: !GetAtt WebsiteBucket.WebsiteURL
